// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	entity "AggregationService/internal/domain/models/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ISubscriptionRepository is an autogenerated mock type for the ISubscriptionRepository type
type ISubscriptionRepository struct {
	mock.Mock
}

// CalculateCost provides a mock function with given fields: ctx, userID, serviceName, startDate, endDate
func (_m *ISubscriptionRepository) CalculateCost(ctx context.Context, userID *uuid.UUID, serviceName *string, startDate *time.Time, endDate *time.Time) (int, error) {
	ret := _m.Called(ctx, userID, serviceName, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for CalculateCost")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *string, *time.Time, *time.Time) (int, error)); ok {
		return rf(ctx, userID, serviceName, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *string, *time.Time, *time.Time) int); ok {
		r0 = rf(ctx, userID, serviceName, startDate, endDate)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, *string, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, userID, serviceName, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, subscription
func (_m *ISubscriptionRepository) Create(ctx context.Context, subscription *entity.Subscription) (*entity.Subscription, error) {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Subscription) (*entity.Subscription, error)); ok {
		return rf(ctx, subscription)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Subscription) *entity.Subscription); ok {
		r0 = rf(ctx, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Subscription) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, userID, serviceName, limit, offset
func (_m *ISubscriptionRepository) GetAll(ctx context.Context, userID *uuid.UUID, serviceName *string, limit int, offset int) ([]*entity.Subscription, error) {
	ret := _m.Called(ctx, userID, serviceName, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entity.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *string, int, int) ([]*entity.Subscription, error)); ok {
		return rf(ctx, userID, serviceName, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *string, int, int) []*entity.Subscription); ok {
		r0 = rf(ctx, userID, serviceName, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, *string, int, int) error); ok {
		r1 = rf(ctx, userID, serviceName, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ISubscriptionRepository) GetByID(ctx context.Context, id int) (*entity.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, subscription
func (_m *ISubscriptionRepository) Update(ctx context.Context, subscription *entity.Subscription) (*entity.Subscription, error) {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Subscription) (*entity.Subscription, error)); ok {
		return rf(ctx, subscription)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Subscription) *entity.Subscription); ok {
		r0 = rf(ctx, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Subscription) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISubscriptionRepository creates a new instance of ISubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubscriptionRepository {
	mock := &ISubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
